/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.consumer;

import core.db.dbconn;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.catalina.Session;
import java.util.UUID;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import javax.servlet.RequestDispatcher;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

/**
 *
 * @author Mubasshir
 */
public class DataAccess extends HttpServlet {

    /**
     * Processes requests for both HTTP
     * <code>GET</code> and
     * <code>POST</code> methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    
    public static final int MAXTRIAL=2;
    public static final int IPTRIAL=2;
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession(true);
       ResultSet rs2=null,rs3=null,rs4=null; 
        boolean errored = false;
        response.setContentType("text/html;charset=UTF-8");
      PrintWriter out = response.getWriter();
        try {//out.print("sdfdf");
        String to="";int uid= (Integer)session.getAttribute("userid");
           session.setAttribute("download",null);
        core.db.UserBehaviourAlg alg=new core.db.UserBehaviourAlg();
        String profile=(String)session.getAttribute("profile");
         int trial=(Integer)session.getAttribute("kcount");          
            String uname=(String)session.getAttribute("user"),hmac="";
            String key=request.getParameter("key");//out.print("ssssss"+key);
          String fid=(String)session.getAttribute("fid"),action=""; //out.print("xxxx"+key);   
           
           Statement connect = dbconn.connect();// out.print("15<br>"+uname+key); 
          
          String ipAddress =request.getHeader("X-FORWARDED-FOR");  
   if (ipAddress == null) {  
	   ipAddress = request.getRemoteAddr();  
   }  int ipflag=0;
    rs4=connect.executeQuery("select count(*) as Rowcount from logdetails where userid="+uid+" and ipaddress='"+ipAddress+"'");  //3 is max ipaddresses 
    if(rs4.next()) 
        if(IPTRIAL<=rs4.getInt("Rowcount"))  
            ipflag=1;
           if((profile!=null&&profile.equals("decoy"))||(alg.getBehave(uid).equals("invalidate"))||(ipflag!=1))
        {
          session.setAttribute("profile","decoy");  
            response.sendRedirect("download?fid="+0);
        }
        
        
           rs2=connect.executeQuery("select * from files where uid=1 and file_id="+fid);
               if(rs2.next())
               {
                   hmac=core.db.Hmac.hmac(rs2.getString("file_name") +rs2.getInt("file_size"));
              
               rs3=connect.executeQuery("select * from files where hmac='"+hmac+"'");
                if(rs3.next())
                {session.setAttribute("profile","decoy");
                 String sql= "INSERT INTO logdetails(userid,action,ukey,fid) values("+uid+",'decoy','" +key + "','" + fid  + "')";
         
                connect.executeUpdate(sql);
                    response.sendRedirect("download?fid="+fid);
                }}
               else{
           ResultSet rs=connect.executeQuery("select * from users where uname='"+uname+"'and userkey='"+key+"'");
           Statement st = dbconn.connect(); //out.print("15<br>"); 
      // boolean f=  rs.next();
            // RequestDispatcher rd=null;
            if(!rs.next())
            {
                if(trial<MAXTRIAL)
                {
                   action="invalid";
                to= "accessfile.jsp?keymsg=Invalid Key&id="+fid;
                }
                 else
                {
                    action="wrongkey";session.setAttribute("profile","decoy");
                   to="download?fid="+0;
                }
            
            }
            else
            {
                if(trial>=MAXTRIAL)
            { //"trialkey";
              if(alg.getBehave(uid).equals("invalidate"))
                  action="trialkey";session.setAttribute("profile","decoy");
                    to="download?fid="+0;
              
            }
            else
            { action= "validkey";
                    
              to="download?fid="+fid;
            }}
          String sql= "INSERT INTO logdetails(userid,action,ukey,fid) values("+uid+",'" +action + "','" +key + "','" + fid  + "')";
         
            //out.print("EXE");
         int row=st.executeUpdate(sql);
       
          response.sendRedirect(to);//rd.forward(request, response);
               } 
            if (errored) {
                    session.setAttribute("flash_message", "Failed to save. Try again");
                session.setAttribute("flash_type", "error");
                response.sendRedirect("accessfile.jsp?id="+fid);
           
            } 
                
        } catch (Exception e) {
            e.printStackTrace();
           // out.println("error"+e);

        } finally {
           // out.close();
            
        }
    }

   

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP
     * <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP
     * <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>
}
